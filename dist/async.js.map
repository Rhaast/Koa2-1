{"version":3,"sources":["../src/async.js"],"names":["readAsync","data","JSON","parse","console","log","name","init","fs","require","co","util","readFile","cb","err","readFileAsync","path","Promise","resolve","reject","then","catch","error","promisify"],"mappings":";;;;;;;;;;;sFAqDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmBA,UAAU,iBAAV,CADnB;;AAAA;AACMC,gBADN;;;AAGEA,mBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;;AAEAG,oBAAQC,GAAR,CAAYJ,KAAKK,IAAjB;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,I;;;;;;;AArDf,IAAMC,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;;AAEA;AACA,SAASG,QAAT,CAAmBC,EAAnB,EAAuB;AACrBL,KAAGI,QAAH,CAAY,iBAAZ,EAA+B,UAACE,GAAD,EAAMb,IAAN,EAAe;AAC5C,QAAIa,GAAJ,EAAS,OAAOD,GAAGC,GAAH,CAAP;;AAETD,OAAG,IAAH,EAASZ,IAAT;AACD,GAJD;AAKD;;AAEDW,SAAS,UAACE,GAAD,EAAMb,IAAN,EAAe;AACtB,MAAI,CAACa,GAAL,EAAU;AACRb,WAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;;AAEAG,YAAQC,GAAR,CAAYJ,KAAKK,IAAjB;AACD;AACF,CAND;;AAQA;AACA,SAASS,aAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCX,OAAGI,QAAH,CAAYI,IAAZ,EAAkB,UAACF,GAAD,EAAMb,IAAN,EAAe;AAC/B,UAAIa,GAAJ,EAASK,OAAOL,GAAP,EAAT,KACKI,QAAQjB,IAAR;AACN,KAHD;AAID,GALM,CAAP;AAMD;;AAEDc,cAAc,iBAAd,EACGK,IADH,CACQ,gBAAQ;AACZnB,SAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;;AAEAG,UAAQC,GAAR,CAAYJ,KAAKK,IAAjB;AACD,CALH,EAMGe,KANH,CAMS,eAAO;AACZjB,UAAQkB,KAAR,CAAcR,GAAd;AACD,CARH;;AAUA;AACAJ,4CAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACgBC,KAAKY,SAAL,CAAef,GAAGI,QAAlB,EAA4B,iBAA5B,CADhB;;AAAA;AACGX,cADH;;;AAGDA,iBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;;AAEAG,kBAAQC,GAAR,CAAYJ,KAAKK,IAAjB;;AALC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAH;;AAQA;AACA,IAAMN,YAAYW,KAAKY,SAAL,CAAef,GAAGI,QAAlB,CAAlB;;AAUAL","file":"async.js","sourcesContent":["const fs = require('fs')\nconst co = require('co')\nconst util = require('util')\n\n// js异步处理第一阶段：callback\nfunction readFile (cb) {\n  fs.readFile('../package.json', (err, data) => {\n    if (err) return cb(err)\n\n    cb(null, data)\n  })\n}\n\nreadFile((err, data) => {\n  if (!err) {\n    data = JSON.parse(data)\n\n    console.log(data.name)\n  }\n})\n\n// js异步处理第二阶段：promise\nfunction readFileAsync (path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, data) => {\n      if (err) reject(err)\n      else resolve(data)\n    })\n  })\n}\n\nreadFileAsync('../package.json')\n  .then(data => {\n    data = JSON.parse(data)\n\n    console.log(data.name)\n  })\n  .catch(err => {\n    console.error(err)\n  })\n\n// js异步处理第三阶段：co + Generator Fuction + Promisify\nco(function *() {\n  let data = yield util.promisify(fs.readFile)('../package.json')\n\n  data = JSON.parse(data)\n\n  console.log(data.name)\n})\n\n// js异步处理第四阶段：async\nconst readAsync = util.promisify(fs.readFile)\n\nasync function init () {\n  let data = await readAsync('../package.json')\n\n  data = JSON.parse(data)\n\n  console.log(data.name)\n}\n\ninit()\n"]}